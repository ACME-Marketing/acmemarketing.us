---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { graphQLClient, gql } from '../../lib/graphql';

export async function getStaticPaths() {
  const GET_ALL_POST_SLUGS = gql`
    query GetAllPostSlugs {
      posts {
        nodes {
          uri
        }
      }
    }
  `;
  const data = await graphQLClient.request(GET_ALL_POST_SLUGS);
  return data.posts.nodes.map((post) => ({
    params: { slug: post.uri.replace(/\/$/, '') },
  }));
}

const GET_SINGLE_POST = gql`
  query GetSinglePost($uri: String!) {
    postBy(uri: $uri) {
      title
      content
      featuredImage {
        node {
          sourceUrl
          altText
          mediaDetails {
            width
            height
          }
        }
      }
      
    }
  }
`;

const { slug } = Astro.params;
const uri = `/${slug}/`;

let post = null;
let allPosts = [];

try {
  const data = await graphQLClient.request(GET_SINGLE_POST, { uri });
  post = data.postBy;

  // Fetch all posts to determine previous/next and sidebar
  const GET_ALL_POSTS = gql`
    query GetAllPosts($tagSlugs: [String]) {
      posts(first: 100) { # Fetch a reasonable number of posts
        nodes {
          title
          uri
        }
      }
    }
  `;
  const allPostsData = await graphQLClient.request(GET_ALL_POSTS);
  allPosts = allPostsData.posts.nodes;

} catch (error) {
  console.error("Error fetching post or all posts:", error);
}