---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { graphQLClient, gql } from '../../lib/graphql';

export async function getStaticPaths() {
  const GET_ALL_POST_SLUGS = gql`
    query GetAllPostSlugs {
      posts {
        nodes {
          uri
        }
      }
    }
  `;
  const data = await graphQLClient.request(GET_ALL_POST_SLUGS);
  return data.posts.nodes.map((post) => ({
    params: { slug: post.uri.replace(/\/$/, '') },
  }));
}

const GET_SINGLE_POST = gql`
  query GetSinglePost($uri: String!) {
    postBy(uri: $uri) {
      title
      content
      featuredImage {
        node {
          sourceUrl
          altText
          mediaDetails {
            width
            height
          }
        }
      }
      tags {
        nodes {
          name
          slug
        }
      }
    }
  }
`;

const { slug } = Astro.params;
const uri = `/${slug}/`;

let post = null;
let allPosts = [];

try {
  const data = await graphQLClient.request(GET_SINGLE_POST, { uri });
  post = data.postBy;
  console.log("Fetched single post:", post);

  // Fetch all posts to determine previous/next and sidebar
  const GET_ALL_POSTS = gql`
    query GetAllPosts($tagSlugs: [String]) {
      posts(first: 100, where: { tagSlugIn: $tagSlugs }) { # Fetch a reasonable number of posts
        nodes {
          title
          uri
          tags {
            nodes {
              slug
            }
          }
        }
      }
    }
  `;
  const currentPostTags = post.tags.nodes.map(tag => tag.slug);
  const tagSlugsToFilter = [...new Set([...currentPostTags, "all"])]; // Include "all" tag
  const allPostsData = await graphQLClient.request(GET_ALL_POSTS, { tagSlugs: tagSlugsToFilter });
  allPosts = allPostsData.posts.nodes;
  console.log("Fetched all posts for sidebar/nav:", allPosts);

} catch (error) {
  console.error("Error fetching post or all posts:", error);
}

if (!post) {
  console.error("Post not found for URI:", uri);
  return Astro.redirect('/404'); // Redirect to a 404 page if post not found
}